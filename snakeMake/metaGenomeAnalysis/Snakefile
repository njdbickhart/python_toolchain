import os
import re
import subprocess
# The following is a cluster-environment specific change
shell.executable("/usr/bin/bash")
# Wildcards: {sample} {assembly_group}

configfile : "config.json"

# Dealing with logdirs and other directories
os.makedirs(config['logdir'], exist_ok=True)
os.makedirs(config['logdir'] + "/bwa", exist_ok=True)
os.makedirs("assembly", exist_ok=True)

def getAssemblyBaseName(files):
    return [re.sub('\.fa.{0,3}', '', os.path.basename(x)) for x in files]

include: "rules/annotate.snakefile"
include: "rules/binning.snakefile"
include: "rules/taxify.snakefile"

localrules: all
rule all:
    input:
        expand("assembly/{assembly_group}.fa", assembly_group=getAssemblyBaseName(config["assemblies"])),
        "FinishedBinning",

# Take configuration assemblies and softlink them
rule link_assemblies:
    input:
        config["assemblies"]
    output:
        "assembly/{assembly_group}.fa"
    run:
        for i in input:
            cmd = ["ln", "-s", i, "assembly/" + re.sub('\.fa.{0,3}', '', os.path.basename(i)) + ".fa"]
            subprocess.call(cmd)
