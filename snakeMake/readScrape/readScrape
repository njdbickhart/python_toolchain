shell.executable("/usr/bin/bash")

configfile : "default.json"

rule all:
    input: expand("classification/{sample}/{sample}.contigs.mash.tab", sample=config["samples"])

rule extract_reads:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        mUnmap1 = "rawreads/{sample}/{sample}_mateUnmapped_R1.fq",
        mUnmap2 = "rawreads/{sample}/{sample}_mateUnmapped_R2.fq",
        mMap1 = "rawreads/{sample}/{sample}_R1_mateMapped.fq",
        mMap2 = "rawreads/{sample}/{sample}_R2_mateMapped.fq",
        links = "rawreads/{sample}/{sample}_links.sam"
    shell:
        """
        module load samtools
        samtools fastq -f 12 {input} -1 {output.mUnmap1} -2 {output.mUnmap2}
        samtools fastq -f 68 -F 8 {input} > {output.mMap1}
        samtools fastq -f 132 -F 8 {input} > {output.mMap2}
        samtools view -f 8 -F 4 {input} > {output.links}
        """

rule run_spades:
    input:
        mUnmap1 = "rawreads/{sample}/{sample}_mateUnmapped_R1.fq",
        mUnmap2 = "rawreads/{sample}/{sample}_mateUnmapped_R1.fq",
        mMap1 = "rawreads/{sample}/{sample}_R1_mateMapped.fq",
        mMap2 = "rawreads/{sample}/{sample}_R2_mateMapped.fq"
    threads: 16
    params:
        memlimit = 100,
        outdir = "assembly/{sample}"
    output:
        "assembly/{sample}/scaffolds.fasta"
    shell:
        "module load spades/3.12.0; spades.py --pe1-1 {input.mUnmap1} --pe1-2 {input.mUnmap2} --s1 {input.mMap1} --s2 {input.mMap2} -t {threads} -m {params.memlimit} -o {params.outdir}"

rule mash_screen:
    input:
        asm = "assembly/{sample}/scaffolds.fasta"
    params:
        mashexe = config["mashexe"]
        mashsketch = config["mashsketch"]
    output:
        assign = "classification/{sample}/{sample}.contigs.mash.tab"
    shell:
        "{params.mashexe} screen {params.mashsketch} {input.asm} > {output.assign}"
