import os
shell.executable("/usr/bin/bash")

configfile : "default.json"

# Make log directories if they don't exist.
# Apparently SnakeMake slurm scripts silently terminate if this doesn't exist!
os.makedirs(config['logdir'], exist_ok=True)
for x in expand("{logdir}/{sample}", logdir=config['logdir'], sample=config["samples"]):
    os.makedirs(x, exist_ok=True)

rule all:
    input: expand("classification/{sample}/{sample}.centrifuge.krakenOut", sample=config["samples"])

rule extract_reads:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        mUnmap1 = "rawreads/{sample}/{sample}_mateUnmapped_R1.fq",
        mUnmap2 = "rawreads/{sample}/{sample}_mateUnmapped_R2.fq",
        mMap1 = "rawreads/{sample}/{sample}_R1_mateMapped.fq",
        mMap2 = "rawreads/{sample}/{sample}_R2_mateMapped.fq",
        links = "rawreads/{sample}/{sample}_links.sam"
    log: config['logdir'] + "/{sample}/extract.log"
    shell:
        """
        module load samtools
        samtools fastq -f 12 {input} -1 {output.mUnmap1} -2 {output.mUnmap2}
        samtools fastq -f 68 -F 8 {input} > {output.mMap1}
        samtools fastq -f 132 -F 8 {input} > {output.mMap2}
        samtools view -f 8 -F 4 {input} > {output.links}
        """

rule run_spades:
    input:
        mUnmap1 = "rawreads/{sample}/{sample}_mateUnmapped_R1.fq",
        mUnmap2 = "rawreads/{sample}/{sample}_mateUnmapped_R2.fq",
        mMap1 = "rawreads/{sample}/{sample}_R1_mateMapped.fq",
        mMap2 = "rawreads/{sample}/{sample}_R2_mateMapped.fq"
    threads: 16
    log: config['logdir'] + "/{sample}/spades.log"
    params:
        memlimit = 100,
        outdir = "assembly/{sample}"
    output:
        "assembly/{sample}/scaffolds.fasta"
    shell:
        "module load spades/3.12.0; spades.py --pe1-1 {input.mUnmap1} --pe1-2 {input.mUnmap2} --s1 {input.mMap1} --s2 {input.mMap2} -t {threads} -m {params.memlimit} -o {params.outdir}"

rule modify_and_index:
    input:
        asm = "assembly/{sample}/scaffolds.fasta"
    log: config['logdir'] + "/{sample}/modify.log"
    params:
        samp = "{sample}"
    output:
        rasm = "assembly/{sample}/{sample}.renamed.fasta",
        rfai = "assembly/{sample}/{sample}.renamed.fasta.fai"
    script:
        "scripts/modifySeqName.py"

rule tabulate_spades:
    input:
        expand("assembly/{sample}/{sample}.renamed.fasta.fai", sample=config["samples"])
    output:
        "assembly/summaryStatsOfSamples.tab"
    script:
        "scripts/calcFastaSumStats.py"

rule run_centrifuge:
    input:
        rasm = "assembly/{sample}/{sample}.renamed.fasta"
    log: config['logdir'] + "/{sample}/centrifuge.log"
    params:
        centrifuge = config["centrifuge"],
        centrifugedb = config["centrifugedb"]
    output:
        report = "classification/{sample}/{sample}.centrifuge.report",
        output = "classification/{sample}/{sample}.centrifuge.out",
        kraken = "classification/{sample}/{sample}.centrifuge.krakenOut"
    shell:
        """
        {params.centrifuge} --report-file {output.report} -x {params.centrifugedb} -k 1 --host-taxids 9913 -f {input.rasm} > {output.output}
        {params.centrifuge}-kreport -x {params.centrifugedb} {output.output} --min-score 0 --min-length 0 > {output.kraken}
        """
