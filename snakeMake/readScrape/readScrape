import os
shell.executable("/usr/bin/bash")

configfile : "default.json"

# Make log directories if they don't exist.
# Apparently SnakeMake slurm scripts silently terminate if this doesn't exist!
os.makedirs(config['logdir'], exist_ok=True)
for x in expand("{logdir}/{sample}", logdir=config['logdir'], sample=config["samples"]):
    os.makedirs(x, exist_ok=True)

localrules: tabulate_spades, pre_c, plot_contig_assoc_counts

rule all:
    input:
        "assembly/summaryStatsOfSamples.tab",
        "genotypes/genotype_summary.tab",
        expand("genotypes/{sample}.genotype.tab", sample=config["samples"]),
        "plots/association_counts_lineplot.pdf"

rule extract_reads:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        mUnmap1 = "rawreads/{sample}/{sample}_mateUnmapped_R1.fq",
        mUnmap2 = "rawreads/{sample}/{sample}_mateUnmapped_R2.fq",
        mMap1 = "rawreads/{sample}/{sample}_R1_mateMapped.fq",
        mMap2 = "rawreads/{sample}/{sample}_R2_mateMapped.fq",
        links = "rawreads/{sample}/{sample}_links.sam"
    log: config['logdir'] + "/{sample}/extract.log"
    shell:
        """
        module load samtools
        samtools fastq -f 12 {input} -1 {output.mUnmap1} -2 {output.mUnmap2}
        samtools fastq -f 68 -F 8 {input} > {output.mMap1}
        samtools fastq -f 132 -F 8 {input} > {output.mMap2}
        samtools view -f 8 -F 4 {input} > {output.links}
        """

rule run_spades:
    input:
        mUnmap1 = "rawreads/{sample}/{sample}_mateUnmapped_R1.fq",
        mUnmap2 = "rawreads/{sample}/{sample}_mateUnmapped_R2.fq",
        mMap1 = "rawreads/{sample}/{sample}_R1_mateMapped.fq",
        mMap2 = "rawreads/{sample}/{sample}_R2_mateMapped.fq"
    threads: 16
    log: config['logdir'] + "/{sample}/spades.log"
    params:
        memlimit = 150,
        outdir = "assembly/{sample}"
    output:
        "assembly/{sample}/scaffolds.fasta"
    shell:
        "spades.py --pe1-1 {input.mUnmap1} --pe1-2 {input.mUnmap2} --s1 {input.mMap1} --s2 {input.mMap2} -t {threads} -m {params.memlimit} -o {params.outdir}"

rule modify_and_index:
    input:
        asm = "assembly/{sample}/scaffolds.fasta"
    log: config['logdir'] + "/{sample}/modify.log"
    params:
        samp = "{sample}"
    output:
        rasm = "assembly/{sample}/{sample}.renamed.fasta",
        rfai = "assembly/{sample}/{sample}.renamed.fasta.fai"
    script:
        "scripts/modifySeqName.py"

rule tabulate_spades:
    input:
        expand("assembly/{sample}/{sample}.renamed.fasta.fai", sample=config["samples"])
    output:
        "assembly/summaryStatsOfSamples.tab"
    script:
        "scripts/calcFastaSumStats.py"

rule run_centrifuge:
    input:
        rasm = "assembly/{sample}/{sample}.renamed.fasta"
    log: config['logdir'] + "/{sample}/centrifuge.log"
    params:
        centrifugedb = config["centrifugedb"],
        hosttax = "9913"
    output:
        report = "classification/{sample}/{sample}.centrifuge.report",
        output = "classification/{sample}/{sample}.centrifuge.out",
        kraken = "classification/{sample}/{sample}.centrifuge.krakenOut"
    shell:
        """
        centrifuge --report-file {output.report} -x {params.centrifugedb} -k 1 --host-taxids {params.hosttax} -f {input.rasm} > {output.output} 2> {log}
        centrifuge-kreport -x {params.centrifugedb} {output.output} --min-score 0 --min-length 0 > {output.kraken} 2> {log}
        """

rule filter_centrifuge:
    input:
        cent = "classification/{sample}/{sample}.centrifuge.out",
        rasm = "assembly/{sample}/{sample}.renamed.fasta"
    log: config['logdir'] + "/{sample}/filt_centrifuge.log"
    params:
        samp = "{sample}",
        taxids = config["taxids"]
    output:
        fasm = "filtered/{sample}/{sample}.scaffolds.filtered.fasta"
    script:
        "scripts/filterCentrifugeScaffolds.py"

rule remap_unmapped:
    input:
        fasm = "filtered/{sample}/{sample}.scaffolds.filtered.fasta",
        mUnmap1 = "rawreads/{sample}/{sample}_R1_mateMapped.fq",
        mUnmap2 = "rawreads/{sample}/{sample}_R2_mateMapped.fq"
    log: config['logdir'] + "/{sample}/remap_unmap.log"
    params: samp = "{sample}"
    output:
        catunmap = "filtered/{sample}/{sample}.cat.unmapped.fq",
        readalign = "filtered/{sample}/{sample}.readcontig.bam",
        unmaplinks = "linkage/{sample}/{sample}.readlinks.bed"
    shell:
        """
        cat {input.mUnmap1} {input.mUnmap2} > {output.catunmap}
        bwa index {input.fasm}
        bwa mem {input.fasm} {output.catunmap} | samtools view -h -F 256 - | samtools sort -t {params.samp}.sam.temp -n -o {output.readalign} -
        echo "Done with BWA MEM alignment" > {log}
        bedtools bamtobed -i {output.readalign} > {output.unmaplinks} 2> {log}
        """

rule match_mates:
    input:
        unmaplinks = "linkage/{sample}/{sample}.readlinks.bed",
        links = "rawreads/{sample}/{sample}_links.sam",
        rfai = "assembly/{sample}/{sample}.renamed.fasta.fai",
        fasm = "filtered/{sample}/{sample}.scaffolds.filtered.fasta"
    log: config['logdir'] + "/{sample}/mate_match.log"
    params:
        samp = "{sample}",
        edge = 1000
    output:
        filtreads = "linkage/{sample}/{sample}.filt.readlinks.bed",
        mcontigs = "linkage/{sample}/{sample}.scaffolds.linked.fasta",
        raw = "linkage/{sample}/{sample}.observances.bed",
        flanks = "linkage/{sample}/{sample}.scaffolds.flanks.bed"
    script:
        "scripts/matchMates.py"

rule pre_c:
    input:
        expand("linkage/{sample}/{sample}.scaffolds.linked.fasta", sample=config["samples"])
    log: config['logdir'] + "/prec_cd_hit.log"
    output:
        combined = "collation/combined_assemblies.fasta"
    run:
        with open(output.combined, 'w') as out:
            for i in input:
                with open(i, 'r') as data:
                    for l in data:
                        out.write(l)

rule c_step:
    input:
        "collation/combined_assemblies.fasta"
    log: config['logdir'] + "/collation_cd_hit.log"
    params:
        threads = 15,
        mem = 50000
    output:
        c_file = "collation/main_c_file.cdhit.clstr"
    shell:
        """
        cd-hit-est -i {input} -o collation/main_c_file.cdhit -c 0.95 -n 10 -d 0 -M {params.mem} -T {params.threads} -s 0.9
        """

rule genotype:
    input:
        c_file = "collation/main_c_file.cdhit.clstr",
        flanks = expand("linkage/{sample}/{sample}.scaffolds.flanks.bed", sample=config["samples"])
    log: config['logdir'] + "/genotyping_script.log"
    output:
        summary = "genotypes/genotype_summary.tab",
        insertions = expand("genotypes/{sample}.genotype.tab", sample=config["samples"]),
        associations = "genotypes/association_counts.tab"
    script:
        "scripts/genotypeNovSeq.py"

# rule plot_contig_lengths

rule plot_contig_assoc_counts:
    input:
        associations = "genotypes/association_counts.tab"
    output:
        lineplot = "plots/association_counts_lineplot.pdf"
    params:
        maxlines = 5
    script:
        "scripts/contigAssociationLinePlot.py"

# rule associate_rd_signal

# rule plot_genome_position
