import os
import subprocess as sp
from subprocess import PIPE, STDOUT
import pysam

shell.executable("/usr/bin/bash")

configfile : "default.json"

os.makedirs("logs", exist_ok=True)
os.makedirs("mapped", exist_ok=True)

rule all:
    input:
        "calls/merged_frc.txt_Features.txt",
        "calls/merged_frc.txt_FRC.txt",
        "calls/merged_freebayes.vcf",
        "calls/merged_lumpy.vcf",
        "calls/merged_depth.txt",
        "calls/qv_value.txt",
        "final/summary_table.tab",
        expand("merqury/mer.spectra-asm.{postfix}.pdf", postfix=["fl", "ln", "st"])

rule align_reads:
    input:
        fq1 = lambda wildcards: config["samples"][wildcards.sample][0],
        fq2 = lambda wildcards: config["samples"][wildcards.sample][1],
        fasta = config["fasta"]
    output:
        temp("mapped/{sample}.bam")
    log:
        "logs/{sample}_bwa.log"
    threads: 8
    shell:
        """
        module load bwa samtools/1.9
        bwa mem -R '@RG\\tID:ASM\\tSM:ASM\\tPL:ILLUMINA' -t {threads} -M {input.fasta} {input.fq1} {input.fq2} | samtools sort -o {output}  - >> {log} 2>&1
        samtools index {output}
        """

rule merge_bams:
    input:
        expand("mapped/{sample}.bam", sample=config["samples"])
    output:
        "mapped/merged.bam",
        "mapped/merged.bam.bai"
    threads: 5
    shell:
        """
        module load samtools/1.9
        samtools merge -@ {threads} {output[0]} {input}
        samtools index {output[0]}
        """

def get_scaffolds(file):
    array = list()
    if not os.path.exists(file + ".fai"):
        print("Fasta file needs to be indexed")
        shell("module load samtools; samtools faidx {}".format(file))
    with open(file + ".fai", 'r') as input:
        for l in input:
            segs = l.rstrip().split()
            array.append(segs[0])
    return array

rule freebayes:
    input:
        ref=config["fasta"],
        samples="mapped/merged.bam",
        indexes="mapped/merged.bam.bai"
    output:
        #vars = temp(expand("calls/sub_{region}_freebayes.vcf", region=get_scaffolds(config["fasta"])))
        "calls/merged_freebayes.vcf"
    log:
        "logs/freebayes.log"
    conda:
        "envs/freebayes.yaml"
    params:
        extra="-C 2 -0 -O -q 20 -z 0.10 -E 0 -X -u -p 2 -F 0.75",
        chunksize=1000000
    threads: 10
    script:
        "scripts/freebayes_lift.py"

# rule merge_freebayes:
#     input:
#         calls = expand("calls/sub_{region}_freebayes.vcf", region=get_scaffolds(config["fasta"]))
#     output:
#         "calls/merged_freebayes.vcf"
#     shell:
#         """
#         module load bcftools/1.9
#         bcftools concat -o {output} -O v -d {input.calls}
#         """

rule frc_align:
    input:
        ref=config["fasta"],
        samples="mapped/merged.bam"
    output:
        features="calls/merged_frc.txt_Features.txt",
        frc="calls/merged_frc.txt_FRC.txt"
    params:
        outprefix="calls/merged_frc.txt"
    shell:
        """
        module load frc_align
        FRC --pe-sam {input.samples} --output {params.outprefix}
        """

rule lumpy:
    input:
        samples="mapped/merged.bam"
    output:
        "calls/merged_lumpy.vcf"
    conda:
        "envs/lumpy.yaml"
    log:
        "logs/lumpy.log"
    shell:
        """
        lumpyexpress -B {input.samples} -o {output} -v 2> {log}
        """

rule samtools_depth:
    input:
        samples="mapped/merged.bam"
    output:
        samdepth="calls/merged_depth.txt"
    conda:
        "envs/depth.yaml"
    params:
        threshold = 3
    script:
        "scripts/depth_estimate.py"

rule qv_estimate:
    input:
        vcf="calls/merged_freebayes.vcf",
        depth="calls/merged_depth.txt"
    output:
        "calls/qv_value.txt"
    shell:
        """
        bash {workflow.basedir}/scripts/qv_estimate.sh {input.depth} {input.vcf} {output[0]}
        """


def getFlatFastqList(wildcards, config):
    data = list()
    for i in range(2):
        data.append(config["samples"][wildcards.sample][i])
    return data

rule meryl_hapmer:
    input:
        lambda wildcards : getFlatFastqList(wildcards, config)
    output:
        directory("mapped/{sample}_1.meryl"),
        directory("mapped/{sample}_2.meryl")
    threads: 24
    params:
        k = 21,
        extra = "threads=24 memory=48"
    shell:
        """
        module load merqury/1.0
        meryl k={params.k} count output {output[0]} {params.extra} {input[0]}
        meryl k={params.k} count output {output[1]} {params.extra} {input[1]}
        """

rule meryl_merge:
    input:
        expand("mapped/{sample}_{lane}.meryl", sample=config["samples"], lane=["1", "2"])
    output:
        directory("mapped/meryl_db.meryl"),
    threads: 10
    params:
        extra = "cpus=10 memory=48g"
    shell:
        """
        module load merqury/1.0
        meryl union-sum output {output} {input}
        """

rule run_merqury:
    input:
        mdb = "mapped/meryl_db.meryl",
        fasta = config["fasta"]
    output:
        dist_only = "merqury/mer.dist_only.hist",
        qv = "merqury/mer.qv",
        spectraasm = "merqury/mer.spectra-asm.hist",
        f1 = "merqury/mer.spectra-asm.fl.pdf",
        ln = "merqury/mer.spectra-asm.ln.pdf",
        st = "merqury/mer.spectra-asm.st.pdf",
        complete = "merqury/completeness.stats"
    params:
        outbase = "mer",
        pdfbase = "mer.spectra-asm"
    threads: 20
    shell:
        """
        module load merqury/1.0
        merqury.sh {input.mdb} {input.fasta} {params.outbase}
        mv mer.* ./merqury/
        mv completeness.stats ./merqury/completeness.stats
        /software/7/apps/merqury/1.0/plot/plot_spectra_cn.R -f {output.spectraasm} -o {params.pdfbase} -z {output.dist_only} --pdf
        mv mer.*.pdf ./merqury/
        """

rule summary_table:
    input:
        merqv = "merqury/mer.qv",
        complete = "merqury/completeness.stats",
        snpqv = "calls/qv_value.txt",
        bams="mapped/merged.bam",
        features="calls/merged_frc.txt_Features.txt",
        lumpy = "calls/merged_lumpy.vcf"
    output:
        table = "final/summary_table.tab"
    script:
        "scripts/summary_table.py"

#rule plot_frc
