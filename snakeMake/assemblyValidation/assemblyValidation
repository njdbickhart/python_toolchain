import os
shell.executable("/usr/bin/bash")

configfile : "default.json"

os.makedirs(config['logdir'], exist_ok=True)
for x in expand("{logdir}/{fasta}", logdir=config['logdir'], sample=config["fasta"]):
    os.makedirs(x, exist_ok=True)

rule all:


rule align_reads:
  input:
    fq1 = lambda wildcards: config["samples"][wildcards.sample][0],
    fq2 = lambda wildcards: config["samples"][wildcards.sample][1],
    fasta = config["fasta"]
  output:
    temp("mapped/{sample}.bam")
  log:
    "{logdir}/{fasta}/{sample}_bwa.log"
  threads: 8
  shell:
    """
    module load bwa samtools/1.9
    samtools faidx {input.fasta}
    bwa mem -t {threads} -M {input.fasta} {input.fq1} {input.fq2} | \
    samtools sort -o {output} -T {sample}.temp -
    samtools index {output}
    """

rule merge_bams:
  input:
    expand("mapped/{sample}.bam", sample=config["samples"])
  output:
    "mapped/merged.bam"
  threads: 5
  shell:
    """
    module load samtools/1.9
    samtools merge -@ {threads} {output} {input}
    samtools index {output}
    """

def get_scaffolds(file):
  array = list()
  with open(file + ".fai", 'r') as input:
    for l in input:
      segs = l.rstrip().split()
      array.append(segs[0])
  return array

rule freebayes:
    input:
      ref=config["fasta"],
      samples="mapped/merged.bam"
    output:
      vars = expand("calls/sub_{region}_freebayes.vcf", region=get_scaffolds(config["fasta"]))
    params:
      extra="-C 2 -0 -O -q 20 -z 0.10 -E 0 -X -u -p 2 -F 0.75",
      region=get_scaffolds(config["fasta"])
    threads: 2
    shell:
      """
      module load freebayes/1.2.0
      freebayes {params.extra} -r {params.region} -f {input.ref} -v {output.vars} {input.samples}
      """

rule merge_freebayes:
  input:
    calls = expand("calls/sub_{region}_freebayes.vcf", region=get_scaffolds(config["fasta"]))
  output:
    "calls/merged_freebayes.vcf"
  shell:
    """
    module load bcftools/1.9
    bcftools concat -o {output} -O v -d {input.calls}
    """


rule frc_align:
  input:
    ref=config["fasta"],
    samples="mapped/merged.bam"
  output:
    "calls/merged_frc.txt"
  shell:
    """"
    module load frc_align
    FRC --pe-sam {input.samples} --output {output}
    """

rule lumpy:
  input:
    samples="mapped/merged.bam"
  output:
    "calls/merged_lumpy.vcf"
  shell:
    """
    lumpyexpress -B {input.samples} -o {output}
    """
