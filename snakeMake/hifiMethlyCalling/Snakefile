import os
import re
import subprocess
from collections import defaultdict

# The following is a cluster-environment specific change
shell.executable("/usr/bin/bash")

wildcard_constraints:
    chunk = "\d+"

configfile : "methyl.json"

maxchunk = config["chunksize"]
chunk = [str(x) for x in range(int(maxchunk))]

rule all:
    input:


rule ccs_recall:
    input:
        readFile = lambda wildcards: config["reads"][wildcards.rf],
        chunk = lambda wildcards: chunks[wildcards.chunk]
    output:
        recalled = "recalled/{rf}_{chunk}.bam",
    threads: 30
    params:
        maxchunk = maxchunk,
        chunkNum = "{chunk}"
    env:
        "envs/pb_tools"
    shell:
        """
        ccs -j {threads} --chunk {params.chunkNum}/{params.maxchunk} --hifi-kinetics {input.readFile} {output.recalled}
        """

rule primrose:
    input:
        recalled = "recalled/{rf}_{chunk}.bam"
    output:
        retagged = "primrose/{rf}_{chunk}.bam"
    threads: 30
    envs:
        "envs/primrose"
    shell:
        """
        primrose -j {threads} {input.recalled} {output.retagged}
        """

rule bam_merge:
    input:
        bams = expand("recalled/{rf}_{{chunk}}.bam", rf=config["reads"].keys())
    output:
        merged = "recalled/{rf}_merged.bam"
    threads: 30
    envs:
        "envs/primrose"
    shell:
        """
        samtools merge -@ {threads} {output.merged} {input.bams}
        """

rule alignment:
    input:
        merged = "recalled/{rf}_merged.bam",
        asm = config["assembly"]
    output:
        aligns = "mapping/{rf}_aligned.bam"
    threads: 30
    envs:
        "envs/pb_tools"
    shell:
        """
        pbmm2 align -j 15 -J 15 --sort --log-level INFO --preset HIFI {input.asm} {input.merged} {output.aligns}
        """
rule read_file_merge:
    input:
        aligns = expand("mapping/{rf}_aligned.bam", rf=config["reads"].keys())
    output:
        merged = "mapping/total_merged_pacb.bam"
    threads: 30
    envs:
        "envs/primrose"
    shell:
        """
        samtools merge -@ {threads} {output.merged} {input.aligns}
        """

rule get_model_data:
    output:
        model = directory("pb-CpG-tools/pileup_calling_model")
    shell:
        """
        # It's ugly, but this is the work-around I have to use!
        git clone https://github.com/PacificBiosciences/pb-CpG-tools.git
        """

rule methyl_calling:
    input:
        aligns = "mapping/total_merged_pacb.bam",
        model = "pb-CpG-tools/pileup_calling_model",
        assembly = config["assembly"],
        mode = ["count", "model"]
    output:
        calls = "calls/cpgscores_{mode}.combined.denovo.mincov4.bed"
    threads: 30
    params:
        outbase = "calls/cpgscores_{mode}"
    envs:
        "envs/pb_tools"
    shell:
    """
    aligned_bam_to_cpg_scores.py -b {input.aligns} -f {input.assembly} -o {params.outbase} -p {input.mode} -d {input.model} -t {threads}
    """
